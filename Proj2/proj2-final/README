Name: Wenxuan Liu
Email: allenliux01@163.com
ID: 805152602

Design of code
First, there are several helper functions that are shared by both server.c and client.c, which are print_header() for printout the messages with corresponding SEND, RECV, RESEND, and DUP-ACK situations and SYN, FIN, ACK flags, sysTime() for get the precise current time in msec, init_packet() for creating a packet with given seq_no, ack_no, ack_flag, seq_flag, and fin_flag. Also, my packet is composed of a 12-bytes header of the five elements(2 bytes each) plus 2 byte padding, and a a 512 bytes buffer as the data payload.
Server.c:
The logic design for server is that it first gets the input of port number, then gets into the outmost while loop(for keep receiving other requests) and then sets up the UDP connection on socket with the given port and its local IP. Then, it initializes the variables such as its current seq # by rand() and client socket info. Then, it keeps waiting for incoming packets in a while loop, and opens a file and sends back a ACK SYN if a packet with SYN is received, write data in packet into file and sends ACK packet if packet with in-order seq# is received, and sends dup-ack if out-order packet is received. When receiving fin, sends ACK for FIN and break the RECV loop, then keeps initiating FIN packet and sends to client until receiving an ACK.

Client.c:
The server first takes input of port number, IP address, and file to send, then set up the corresponding UDP connection. It first keeps sending SYN with a time gap until receive the corresponding ACK SYN, then it open the file and read the content into a buffer. Then, client enters the pipeline GBN scheme to sends packet, each with 512 bytes datagram copied in byte by byte. The Logic control is that when there's still content to send in buffer and it was not a dup-ack received last time, client sends a new packet with data and put the packet into a window array of packets. Then, when the window size reaches 10 or last packet is sent, the client stops sending packet and waits for incoming packet, immediately resends all packets in window if timeout, and deduct window size if non-dup ACK is received. Then, when ALL data has been ACKed, client keeps initiates FIN requests until ACK received, and keeps sending ACK for server's FIN request until 2s timeout.

Problems I ran into:
The biggest problem I had was implementing GBN with correct window size control. It was hard to take DUP ACK into consideration such that when receiving DUP-ACK the client should stop sending packets and leaves window size unchanged. I solved this problem by attempting many logic control among different parts of pipeline with variables representing different states of transferring.
Also, the resend scheme is hard to implement because I could only use my imagination to figure out the possible situations and write corresponding solutions without real-time debugging specific situations. I wrote FIN part first for stage 3 after the pipeline part done, and I didn't know in ahead that there are about four kinds of packet loss that should be taken into consideration(i.e. the loss of Client FIN, Server's FIN, Client's ACK for FIN, and Server's ACK for FIN). However, I luckily consider and solve the situations one by one, and when I tested my code on linux with 10% loss rate, it magically worked! Hence, implementing SYN timeout and timer for GBN became easier than it appeared to me after I went through the struggle of FIN timeout.

Acknowledgment:
I used our TA Zhiyi's demo code of UDP socket skeleton in class for reference to set up my basic UDP socket connection.
I read documents of recvfrom and sendto to handle the correct MSG_DONTWAIT parameter for non-blocking recvfrom in socket.
